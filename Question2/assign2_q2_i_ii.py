# -*- coding: utf-8 -*-
"""Assign2_Q2_I_II.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/108lsi0HRLWBDI2w5ZyBiJCKfkWXCawq9
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
url = '/content/drive/MyDrive/Colab Notebooks/A2Q2Data_train.csv'
df=pd.read_csv(url , header = None)
# df._get_value(0 , 'A')
x = df.iloc[0:,0:100]
x
x = np.array(x)

y = df.iloc[0:, 100:]
y = np.array(y)
y.shape

n_features = x.shape[1]
n_datapoints = df.shape[0]
print(n_features , n_datapoints)

x_transpose = np.transpose(x)
print(x_transpose.shape)
# calculate x_transpose x x.
x_xt  = np.matmul(x_transpose, x)
x_xt.shape

def w_Maximum_Likelihood(x, x_transpose, y):
  xxt = np.matmul( x_transpose ,x)
  xxt_inv = np.linalg.inv(xxt)
  xy = np.matmul(x_transpose, y)
  w_ml = np.matmul(xxt_inv, xy)
  print(w_ml)
  return w_ml

w_ml = w_Maximum_Likelihood(x, x_transpose , y)
print(w_ml.shape)

def cost(x, w , n_datapoints):
  cost = 0
  xw = np.matmul(x, w)
  for i in range(n_datapoints):
    cost += (1/ n_datapoints) * (xw[i][0] - y[i][0])**2
  # print(cost)
  return cost

def gd(x , iter, w, n_features,n_datapoints, alpha):
  cost_arr = []
  for i in range(iter): 
    # print(x.shape , w.shape)
    xw = np.matmul(x,w)
    x_transpose = np.transpose(x)
    xw_y = np.subtract(xw, y)
    xxw = np.matmul(x_transpose, xw_y)
    dw = np.multiply(2/n_datapoints , xxw)
    w = np.subtract(w , np.multiply(alpha,dw))
    error = cost(x , w ,n_datapoints)
    cost_arr.append(error)
  return (cost_arr,w)

def plot_error(cost_arr , iter):
  import matplotlib.pyplot as plt
  epochs = range(iter)
  plt.xlabel('No of Iterations')
  plt.ylabel('Error Cost')
  plt.title('Error v/s No of Iterations')
  plt.plot(epochs , cost_arr)

# w = np.random.rand(n_features)
w = np.zeros(n_features)
w = np.expand_dims(w, axis=1)
print(w.shape)
alpha = 0.001
iter = 600
cost_arr , w = gd(x,iter,w ,n_features, n_datapoints, alpha)
plot_error(cost_arr, iter)

print(w)